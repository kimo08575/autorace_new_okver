#!/usr/bin/env python
# -*- coding: utf-8 -*-

################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

# Author: Leon Jung, Gilbert

import rospy
import numpy as np
import math
import tf
import os 
import cv2
import time
from enum import Enum
from std_msgs.msg import UInt8, Float64, String
from sensor_msgs.msg import LaserScan, Image, CompressedImage
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
from turtlebot3_autorace_msgs.msg import MovingParam

class DetectContruction():
    def __init__(self):
        self.fix_angle=0
        # subscribes state : white line reliability
        self.sub_construction_order = rospy.Subscriber('/detect/construction_order', UInt8, self.cbConstructionOrder, queue_size=1)
        self.sub_scan_obstacle = rospy.Subscriber('/detect/scan', LaserScan, self.cbScanObstacle, queue_size=1)
        self.sub_construction_finished = rospy.Subscriber('/control/construction_finished', UInt8, self.cbConstructionFinished, queue_size = 1)
        self.sub_moving_completed = rospy.Subscriber('/control/moving/complete', UInt8, self.cbMovingComplete, queue_size = 1)
        self.pub_construction_return = rospy.Publisher('/detect/construction_stamped', UInt8, queue_size=1)
        self.pub_construction_start = rospy.Publisher('/control/construction_start', UInt8, queue_size = 1)
        self.pub_moving = rospy.Publisher('/control/moving/state', MovingParam, queue_size= 1)
        self.pub_max_vel = rospy.Publisher('/control/max_vel', Float64, queue_size = 1)
        self.pub_timer_start = rospy.Publisher('/detect/timer/start', Float64, queue_size= 1)
        self.sub_odom = rospy.Subscriber('/odom', Odometry, self.cbOdom, queue_size=1)
        
        self.StepOfConstruction = Enum('StepOfConstruction', 'searching_construction_sign find_obstacle motion_lf exit')
        self.is_obstacle_detected = False
        self.is_construction_finished = False
        self.is_motion_allowed = False
        self.is_moving_complete = False
        self.current_angle = 0
        self.turn_angle = 0
        
 

    def cbOdom(self, odom_msg):
        self.current_orientation_w = odom_msg.pose.pose.orientation.w
        x_pos=odom_msg.pose.pose.position.x
        y_pos=odom_msg.pose.pose.position.y
        qx=odom_msg.pose.pose.orientation.x
        qy=odom_msg.pose.pose.orientation.y
        qz=odom_msg.pose.pose.orientation.z
        qw=odom_msg.pose.pose.orientation.w
        self.current_angle=math.degrees(math.atan2(2 * (qx*qy + qw*qz), qw*qw + qx*qx - qy*qy - qz*qz))
        

    def cbScanObstacle(self, scan):
        angle_scan = 25
        scan_start = 0 - angle_scan
        scan_end = 0 + angle_scan
        threshold_distance = 0.25
        a = -90
        min_num = scan.ranges[0]
        #print("start")
        is_obstacle_detected = False
        #從掃描線找最短距離
        for x in range(-90,90):
            if scan.ranges[x] < min_num and scan.ranges[x] > 0:
                min_num = scan.ranges[x]
                
        #找障礙物        
        for i in range(scan_start, scan_end):
            if scan.ranges[i] < threshold_distance and scan.ranges[i] > 0.01:
                is_obstacle_detected = True
        
        #最短距離跟機器人正面(第0條掃描線)算角度
        if (min_num > 0):
            self.turn_angle = math.asin(min_num/scan.ranges[0])*180/math.pi
        else :
            self.turn_angle = 90 
        
        self.is_obstacle_detected = is_obstacle_detected

    def cbMovingComplete(self, data):
        self.is_moving_complete = True

    def cbConstructionOrder(self, order):
        msg_pub_construction_return = UInt8()
        
        if order.data == self.StepOfConstruction.searching_construction_sign.value:
            rospy.loginfo("begin")

            msg_pub_construction_return.data = self.StepOfConstruction.searching_construction_sign.value

        elif order.data == self.StepOfConstruction.find_obstacle.value:
            rospy.loginfo("find obstacle")

            while True:
                if self.is_obstacle_detected == True:

                    rospy.loginfo("Encounter obstacle")
                    break
                else:
                    pass
                    # rospy.loginfo("Not yet")

            msg_pub_max_vel = Float64()
            msg_pub_max_vel.data = 0.0
            self.pub_max_vel.publish(msg_pub_max_vel)
            

            msg_pub_construction_return.data = self.StepOfConstruction.find_obstacle.value

        elif order.data == self.StepOfConstruction.motion_lf.value:
            
            #轉向障礙（相對初始點逆時鐘轉90度）
            msg_moving = MovingParam()
            if ((self.current_angle>90)and(self.current_angle<180)):
                rospy.loginfo("turn_obs : fix right")
                self.fix_angle=self.current_angle-90
                msg_moving.moving_type=3
                msg_moving.moving_value_angular=self.fix_angle
                msg_moving.moving_value_linear=0.0
                self.pub_moving.publish(msg_moving)
                while True:
                    if self.is_moving_complete == True:
                        break
                self.is_moving_complete = False
                
                rospy.sleep(1)
            
            
            elif ((self.current_angle<90)and(self.current_angle>0)):
                rospy.loginfo("turn_obs : fix left")
                self.fix_angle=90-self.current_angle
                self.turn_angle = 180 - self.turn_angle
                msg_moving.moving_type=2
                msg_moving.moving_value_angular=self.fix_angle
                msg_moving.moving_value_linear=0.0
                self.pub_moving.publish(msg_moving)
                while True:
                    if self.is_moving_complete == True:
                        break
                self.is_moving_complete = False
                rospy.sleep(1)
            
            elif ((self.current_angle<0)and(self.current_angle>-90)):
                rospy.loginfo("turn_obs : fix left")
                self.fix_angle=90-self.current_angle
                msg_moving.moving_type=2
                msg_moving.moving_value_angular=self.fix_angle
                msg_moving.moving_value_linear=0.0
                self.pub_moving.publish(msg_moving)
                while True:
                    if self.is_moving_complete == True:
                        break
                self.is_moving_complete = False

                rospy.sleep(1)

            #旋轉至與障礙物平行
            
            self.save_turn_angle = self.turn_angle
            msg_moving.moving_type=2
            msg_moving.moving_value_angular= self.save_turn_angle
            msg_moving.moving_value_linear=0.0
            self.pub_moving.publish(msg_moving)
            while True:
                if self.is_moving_complete == True:
                    break
            self.is_moving_complete = False

            rospy.sleep(1)

            rospy.loginfo("doing motion_str")
            msg_moving.moving_type= 4
            msg_moving.moving_value_angular=0.0
            msg_moving.moving_value_linear=0.25#0.2
            self.pub_moving.publish(msg_moving)
            while True:
                if self.is_moving_complete == True:
                    break
            self.is_moving_complete = False

            rospy.sleep(1)

            rospy.loginfo("doing motion_ri")
            msg_moving.moving_type=3
            msg_moving.moving_value_angular=85
            msg_moving.moving_value_linear=0.0
            self.pub_moving.publish(msg_moving)
            while True:
                if self.is_moving_complete == True:
                    break
            self.is_moving_complete = False

            rospy.sleep(1)

            rospy.loginfo("doing motion_str2")
            msg_moving.moving_type= 4
            msg_moving.moving_value_angular=0.0
            msg_moving.moving_value_linear=0.41 #0.4
            self.pub_moving.publish(msg_moving)
            while True:
                if self.is_moving_complete == True:
                    break
            self.is_moving_complete = False

            rospy.sleep(1)

            rospy.loginfo("doing motion_ri2")
            msg_moving.moving_type=3
            msg_moving.moving_value_angular=90
            msg_moving.moving_value_linear=0.0
            self.pub_moving.publish(msg_moving)
            while True:
                if self.is_moving_complete == True:
                    break
            self.is_moving_complete = False

            rospy.sleep(1)

            rospy.loginfo("doing motion_str3")
            msg_moving.moving_type= 4
            msg_moving.moving_value_angular=0.0
            msg_moving.moving_value_linear=0.2
            self.pub_moving.publish(msg_moving)
            while True:
                if self.is_moving_complete == True:
                    break
            self.is_moving_complete = False

            rospy.sleep(1)

            rospy.loginfo("doing motion_lf2")
            msg_moving.moving_type=2
            msg_moving.moving_value_angular= 90
            msg_moving.moving_value_linear=0.0
            self.pub_moving.publish(msg_moving)
            while True:
                if self.is_moving_complete == True:
                    break
            self.is_moving_complete = False

            rospy.sleep(1)

            rospy.loginfo("doing motion_str4")
            msg_moving.moving_type=4
            msg_moving.moving_value_angular=0.0
            msg_moving.moving_value_linear=0.3
            self.pub_moving.publish(msg_moving)
            while True:
                if self.is_moving_complete == True:
                    break
            self.is_moving_complete = False

            rospy.sleep(1)

            rospy.loginfo("doing motion_lf3")
            msg_moving.moving_type=2
            msg_moving.moving_value_angular=50 
            msg_moving.moving_value_linear=0.0
            self.pub_moving.publish(msg_moving)
            while True:
                if self.is_moving_complete == True:
                    break
            self.is_moving_complete = False

            rospy.sleep(0.5)


            msg_moving.moving_type=4
            msg_moving.moving_value_angular=0.0
            msg_moving.moving_value_linear=0.2 
            self.pub_moving.publish(msg_moving)
            while True:
                if self.is_moving_complete == True:
                    break

            self.is_moving_complete = False

            msg_pub_construction_return.data = self.StepOfConstruction.motion_lf.value        

            # rospy.sleep(3)

        elif order.data == self.StepOfConstruction.exit.value:

            rospy.loginfo("construction finished")

            msg_pub_construction_return.data = self.StepOfConstruction.exit.value

        self.pub_construction_return.publish(msg_pub_construction_return)

    def cbConstructionFinished(self, construction_finished_msg):
        self.is_construction_finished = True

    

    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('detect_contruction')
    node = DetectContruction()
    node.main()

